@model PMCNet8.Models.SaleViewModel
@if (Model != null && Model.SponsorProducts != null && Model.SponsorProducts.Any())
{
    <div class="row">
        <div class="col-lg-3 col-6">
            <div class="small-box bg-success">
                <div class="inner">
                    <h3>@Model.CustomerCount</h3>
                    <p>Khách hàng</p>
                </div>
                <div class="icon">
                    <i class="fas fa-users"></i>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-info">
                <div class="inner">
                    <h3>@Model.ProductCount</h3>
                    <p>Sản phẩm đã quét</p>
                </div>
                <div class="icon">
                    <i class="fas fa-barcode"></i>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-warning">
                <div class="inner">
                    <h3>@Model.TotalAmount.ToString("N0")</h3>
                    <p>Tổng điểm thưởng</p>
                </div>
                <div class="icon">
                    <i class="fas fa-star"></i>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-danger">
                <div class="inner">
                    <h3>@Model.AveragePerProduct.ToString("N0")</h3>
                    <p>Điểm/Sản phẩm</p>
                </div>
                <div class="icon">
                    <i class="fas fa-chart-line"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Chi tiết sản phẩm</h3>
            <button style="height:28px" id="exportProductsButton" class="btn btn-success float-right btn-xs">
                <i class="fas fa-file-excel"></i> Xuất file Excel
            </button>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-striped" id="productTable">
                <thead>
                    <tr>
                        <th style="text-align:center">STT</th>
                        <th style="text-align:center">Sản phẩm</th>
                        <th style="text-align:center">Số lượng đã quét</th>
                        <th style="text-align:center">Số điểm đã quét</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.SponsorProducts.Count; i++)
                    {
                        var product = Model.SponsorProducts[i];
                        <tr data-product-id="@product.ProductId" data-product-name="@product.ProductName">
                            <td style="text-align:center">@(i + 1)</td>
                            <td>@product.ProductName</td>
                            <td style="text-align:center">@product.TotalScans</td>
                            <td style="text-align:center">@product.TotalPoints.ToString("N0")</td>
                        </tr>
                    }
                    <tr>
                        <td colspan="2"><strong>Tổng cộng</strong></td>
                        <td style="text-align:center"><strong>@Model.SponsorProducts.Sum(x => x.TotalScans)</strong></td>
                        <td style="text-align:center"><strong>@Model.SponsorProducts.Sum(x => x.TotalPoints).ToString("N0")</strong></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="card mt-4">
        <div class="card-header">
            <h3 class="card-title">Biểu đồ bán hàng</h3>
        </div>
        <div class="card-body">
            <div class="btn-group mb-3" role="group">
                <button type="button" class="btn btn-secondary" data-group-by="day">Ngày</button>
                <button type="button" class="btn btn-secondary" data-group-by="week">Tuần</button>
                <button type="button" class="btn btn-secondary active" data-group-by="month">Tháng</button>
            </div>

            <canvas id="saleChart"></canvas>
        </div>
    </div>
}
else
{
    <div class="alert alert-info">
        @(string.IsNullOrEmpty(Model?.NoDataMessage) ? "Không có dữ liệu cho khoảng thời gian đã chọn." : Model.NoDataMessage)
    </div>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    $(document).ready(function () {
        // Sự kiện khi nhấn vào nút xuất file Excel
        $("#exportProductsButton").click(function () {
            exportTableToExcel("productTable", "danh_sach_duoc_si_da_hoc_bai.xlsx");
        });

        // Hàm xuất bảng thành file Excel
        async function exportTableToExcel(tableId, fileName) {
            // Lấy dữ liệu từ bảng
            const headers = Array.from($('#' + tableId + ' thead th')).map(th => th.textContent.trim());
            const rows = Array.from($('#' + tableId + ' tbody tr')).map(tr => {
                return Array.from(tr.querySelectorAll('td')).map(td => td.textContent.trim());
            });

            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Học viên hoàn thành');

            // Thêm hàng tiêu đề
            worksheet.addRow(headers);

            // Thêm dữ liệu từ bảng vào file Excel
            rows.forEach(row => {
                worksheet.addRow(row);
            });

            // Định dạng hàng tiêu đề
            const headerRow = worksheet.getRow(1);
            headerRow.font = { bold: true, color: { argb: 'FFFFFF' } };
            headerRow.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: '4472C4' }
            };
            headerRow.alignment = { vertical: 'middle', horizontal: 'center' };

            // Định dạng các cột và tự động điều chỉnh kích thước
            worksheet.columns.forEach((column, index) => {
                let maxLength = headers[index].length;
                column.eachCell({ includeEmpty: true }, (cell) => {
                    const columnLength = cell.value ? cell.value.toString().length : 10;
                    if (columnLength > maxLength) {
                        maxLength = columnLength;
                    }
                });
                column.width = maxLength < 10 ? 10 : maxLength + 2;
            });

            // Thêm đường viền cho tất cả các ô
            worksheet.eachRow((row) => {
                row.eachCell((cell) => {
                    cell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                });
            });

            // Cố định hàng tiêu đề khi cuộn
            worksheet.views = [
                { state: 'frozen', ySplit: 1 }
            ];

            // Thêm ngày xuất file
            const exportDate = new Date().toLocaleString('vi-VN');
            worksheet.addRow([`Ngày xuất: ${exportDate}`]);

            // Tạo file Excel và tự động tải xuống
            const buffer = await workbook.xlsx.writeBuffer();
            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            a.click();
            window.URL.revokeObjectURL(url);

            // Hiển thị thông báo thành công
            Swal.fire({
                title: 'Xuất file thành công!',
                text: 'File Excel đã được tạo và tải xuống.',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        }
    });
</script>
