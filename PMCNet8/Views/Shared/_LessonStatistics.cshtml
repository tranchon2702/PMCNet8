@model LessonStatisticsViewModel

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Thống kê học tập - @Model.LessonName</h3>
            </div>
            <div class="card-body">
                <canvas id="lessonChart" style="height: 400px; width: 100%;"></canvas>
            </div>
        </div>
    </div>
</div>

@if (Model.TableData != null && Model.TableData.Any())
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-dark">
                    <h3 style="color:white" class="card-title">Danh sách dược sĩ tham gia học</h3>
                    <button style="height: 28px;" id="exportParticipantsButton" class="btn btn-success float-right btn-xs"><i class="fas fa-file-excel"></i>  Xuất file Excel</button>

                </div>
                <div class="card-body">
                    <table id="participantsTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Tên Dược sĩ</th>
                                <th>Số điện thoại</th>
                                <th>Email</th>
                                <th>Địa chỉ</th>
                                <th>Đơn vị công tác</th>
                                <th>Hành động</th>
                                <th>Ngày</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.TableData)
                            {
                                <tr>
                                    <td>@item.TenDuocSi</td>
                                    <td>@item.SoDienThoai</td>
                                    <td>@item.Email</td>
                                    <td>@item.DiaChi</td>
                                    <td>@item.DonViCongTac</td>
                                    <td>@item.HanhDong</td>
                                    <td>@(item.Ngay.ToString("dd/MM/yyyy HH:mm"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning mt-4">Không có dữ liệu bảng để hiển thị.</div>
}

<script>
    console.log("Partial view script executing");
    $(document).ready(function () {
        console.log("Partial view document ready");
        var chartData = @Html.Raw(Json.Serialize(Model.ChartData));
        console.log("Chart data:", chartData);
        updateChart(chartData);
        initializeDataTable();
        setupExportButton();
    });

    function updateChart(chartData) {
        console.log("Updating chart with data:", chartData);
        if (!chartData) {
            console.error("Chart data is null or undefined");
            return;
        }

        var ctx = document.getElementById('lessonChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Vào bài học', 'Đã học xong bài học', 'Đã làm bài tập - Đạt', 'Đã làm bài tập - Chưa đạt', 'Tổng số câu hỏi'],
                datasets: [
                    {
                        label: 'Số lượng',
                        data: [chartData.joins, chartData.completedLesson, chartData.completeTest, chartData.failedTest, chartData.totalQuestions],
                        backgroundColor: ['#279EFF', '#96EFFF', '#4CAF50', '#FFC107', '#C80036']
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        ticks: {
                            autoSkip: false,
                            maxRotation: 0,
                            minRotation: 0
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Thống kê hoạt động học tập'
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return context.parsed.y;
                            }
                        }
                    }
                },
                layout: {
                    padding: {
                        bottom: 30
                    }
                },
                barPercentage: 0.8,
                categoryPercentage: 0.9
            }
        });
       
    }

    
    function getAllDataTableData(tableId) {
        var table = $('#' + tableId).DataTable();
        return table.data().toArray();
    }
    $("#exportParticipantsButton").click(function () {
        exportTableToExcel("participantsTable", "danh_sach_duoc_si_tham_gia.xlsx");
    });

    async function exportTableToExcel(tableId, fileName) {
        const data = getAllDataTableData(tableId);
        const headers = Array.from($('#' + tableId + ' thead th')).map(th => th.textContent.trim());

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Học viên hoàn thành');

        // Add headers
        worksheet.addRow(headers);

        // Add data
        data.forEach(row => {
            worksheet.addRow(row);
        });

        // Style header row
        const headerRow = worksheet.getRow(1);
        headerRow.font = { bold: true, color: { argb: 'FFFFFF' } };
        headerRow.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: '4472C4' }
        };
        headerRow.alignment = { vertical: 'middle', horizontal: 'center' };

        // Auto-fit columns
        worksheet.columns.forEach((column, index) => {
            let maxLength = headers[index].length;
            column.eachCell({ includeEmpty: true }, (cell) => {
                const columnLength = cell.value ? cell.value.toString().length : 10;
                if (columnLength > maxLength) {
                    maxLength = columnLength;
                }
            });
            column.width = maxLength < 10 ? 10 : maxLength + 2;
        });

        // Add borders to all cells
        worksheet.eachRow((row, rowNumber) => {
            row.eachCell((cell) => {
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
            });
        });

        // Freeze the header row
        worksheet.views = [
            { state: 'frozen', xSplit: 0, ySplit: 1, topLeftCell: 'A2', activeCell: 'A2' }
        ];

        // Add export date
        const exportDate = new Date().toLocaleString('vi-VN');
        worksheet.addRow([`Ngày xuất: ${exportDate}`]);

        // Generate Excel file
        const buffer = await workbook.xlsx.writeBuffer();
        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();
        window.URL.revokeObjectURL(url);
        showExportSuccessNotification();
    }

    function showExportSuccessNotification() {
        Swal.fire({
            title: 'Xuất file thành công!',
            text: 'File Excel đã được tạo và tải xuống.',
            icon: 'success',
            confirmButtonText: 'OK'
        });
    }
</script>