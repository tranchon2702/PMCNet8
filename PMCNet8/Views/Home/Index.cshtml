@model PMCNet8.Models.HomeViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<section class="content">
    <div class="container-fluid">
        <h5>Thống kê trong tháng (<span id="monthDateRange"></span>)</h5>
        <div class="row">
            <div class="col-lg-4 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        <p>Tổng số dược sĩ đã tham gia học</p>
                        <h3 id="totalParticipantsMonth">Loading...</h3>
                    </div>
                    <div class="icon">
                        <i class="fas fa-book-reader"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        <p>Đã học ít nhất 1 khóa học</p>
                        <h3 id="completedCoursesMonth">Loading...</h3>
                    </div>
                    <div class="icon">
                        <i class="fas fa-user-graduate"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        <p>Số dược sĩ được cấp chứng chỉ</p>
                        <h3 id="getCertificatesMonth">Loading...</h3>
                    </div>
                    <div class="icon">
                        <i class="fas fa-certificate"></i>
                    </div>
                </div>
            </div>
        </div>

        <h5>Thống kê trong năm (<span id="yearDateRange"></span>)</h5>
        <div class="row">
            <div class="col-lg-4 col-6">
                <div class="small-box bg-success">
                    <div class="inner">
                        <p>Tổng số dược sĩ đã tham gia học</p>
                        <h3 id="totalParticipantsYear">Loading...</h3>
                    </div>
                    <div class="icon">
                        <i class="fas fa-book-reader"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        <p>Đã học ít nhất 1 khóa học</p>
                        <h3 id="completedCoursesYear">Loading...</h3>
                    </div>
                    <div class="icon">
                        <i class="fas fa-user-graduate"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        <p>Số dược sĩ được cấp chứng chỉ</p>
                        <h3 id="getCertificatesYear">Loading...</h3>
                    </div>
                    <div class="icon">
                        <i class="fas fa-certificate"></i>
                    </div>
                </div>
            </div>
        </div>

        @if (Model.AvailableCourseTypes.Contains(0))
        {
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Khóa học có cấp chứng chỉ</h3>
                        </div>
                        <div class="card-body">
                            <div class="chart-container">
                                <div class="chart-row">
                                    <div id="certificate_month"></div>
                                    <div id="certificate_year"></div>
                                </div>
                                <div class="chart-legend">
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: #4CAF50;"></span>
                                        <span class="legend-text">Học viên đã tham gia học</span>
                                    </div>
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: #2196F3;"></span>
                                        <span class="legend-text">Học viên đã học ít nhất 1 khóa học</span>
                                    </div>
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: #FFC107;"></span>
                                        <span class="legend-text">Học viên đã hoàn thành khóa học</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Model.AvailableCourseTypes.Contains(1))
        {
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Khóa học không cấp chứng chỉ</h3>
                        </div>
                        <div class="card-body">
                            <div class="chart-container">
                                <div class="chart-row">
                                    <div id="non_certificate_month"></div>
                                    <div id="non_certificate_year"></div>
                                </div>
                                <div class="chart-legend">
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: #4CAF50;"></span>
                                        <span class="legend-text">Học viên đã tham gia học</span>
                                    </div>
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: #2196F3;"></span>
                                        <span class="legend-text">Học viên đã học ít nhất 1 khóa học</span>
                                    </div>
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: #FFC107;"></span>
                                        <span class="legend-text">Học viên đã hoàn thành khóa học</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

</section>

@section Scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        const fetchWithTimeout = async (url, options = {}, timeout = 10000) => {
            return Promise.race([
                fetch(url, options),
                new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('Request timed out')), timeout)
                )
            ]);
        };

        const fetchData = async (url) => {
            try {
                const response = await fetchWithTimeout(url);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }
                return await response.json();
            } catch (error) {
                console.error(`Error fetching data from ${url}:`, error);
                throw error;
            }
        };

        var availableCourseTypes = @Json.Serialize(Model.AvailableCourseTypes);

        async function drawCertificateCharts() {
            if (!availableCourseTypes.includes(0)) return;
            try {
                const [monthData, yearData] = await Promise.all([
                    fetchData('/api/totalCertificatesCategory/month'),
                    fetchData('/api/totalCertificatesCategory/year')
                ]);
                drawChart(monthData, 'certificate_month', 'Thống kê trong tháng');
                drawChart(yearData, 'certificate_year', 'Thống kê trong năm');
            } catch (error) {
                console.error('Error drawing certificate charts:', error);
                document.getElementById('certificate_month').innerHTML = 'Error loading chart data: ' + error.message;
                document.getElementById('certificate_year').innerHTML = 'Error loading chart data: ' + error.message;
            }
        }

        function drawChart(data, elementId, title) {
            if (!data || typeof data !== 'object') {
                throw new Error('Invalid data received');
            }
            const register = data.register ?? 0;
            const finishCourse = data.finishCourse ?? 0;
            const finishTime = data.finishTime ?? 0;
            var chartData = google.visualization.arrayToDataTable([
                ['', 'Học viên đã tham gia học', 'Học viên đã học ít nhất 1 khóa học', 'Học viên đã hoàn thành khóa học'],
                ['Khóa học có cấp chứng chỉ', register, finishTime, finishCourse]
            ]);

            var options = {
                chart: {
                    title: title,
                },
                colors: ['#4CAF50', '#2196F3', '#FFC107'],
                vAxis: {
                    viewWindow: { min: 0 },
                    format: '#',
                    textStyle: { fontSize: 12 }
                },
                hAxis: {
                    textStyle: { fontSize: 12 }
                },
                bar: {
                    groupWidth: '30%', groupPadding: '10%'
                },
                width: 500,
                height: 400,
                chartArea: { width: '80%', height: '70%', left: '10%' },
                legend: { position: 'none' }
            };

            var chart = new google.charts.Bar(document.getElementById(elementId));
            chart.draw(chartData, google.charts.Bar.convertOptions(options));
        }

        async function drawUpdateCharts() {
            if (!availableCourseTypes.includes(2)) return;
            try {
                const [monthData, yearData] = await Promise.all([
                    fetchData('/api/totalUpdateCategory/month'),
                    fetchData('/api/totalUpdateCategory/year')
                ]);
                drawUpdateChart(monthData, 'update_month', 'Thống kê trong tháng');
                drawUpdateChart(yearData, 'update_year', 'Thống kê trong năm');
            } catch (error) {
                console.error('Error drawing update charts:', error);
                document.getElementById('update_month').innerHTML = 'Error loading chart data: ' + error.message;
                document.getElementById('update_year').innerHTML = 'Error loading chart data: ' + error.message;
            }
        }

        function drawUpdateChart(data, elementId, title) {
            if (!data || typeof data !== 'object') {
                throw new Error('Invalid data received');
            }
            const watched = data.watched ?? 0;
            const finish = data.finish ?? 0;
            var chartData = google.visualization.arrayToDataTable([
                ['', 'Học viên đã tham gia học', 'Học viên đã hoàn thành'],
                ['Khóa học cập nhật kiến thức', watched, finish]
            ]);

            var options = {
                chart: { title: title },
                colors: ['#4CAF50', '#2196F3'],
                vAxis: {
                    viewWindow: { min: 0 },
                    format: '#'
                },
                legend: {
                    position: 'none',
                },
                chartArea: { width: '100%', height: '70%' },
                width: '100%',
                height: 400,
                bar: { groupWidth: '30%' }
            };

            var chart = new google.charts.Bar(document.getElementById(elementId));
            chart.draw(chartData, google.charts.Bar.convertOptions(options));
        }

        async function drawNonCertificateCharts() {
            if (!availableCourseTypes.includes(1)) return;
            try {
                const [monthData, yearData] = await Promise.all([
                    fetchData('/api/totalNonCertificatesCategory/month'),
                    fetchData('/api/totalNonCertificatesCategory/year')
                ]);
                drawNonCertificateChart(monthData, 'non_certificate_month', 'Thống kê trong tháng');
                drawNonCertificateChart(yearData, 'non_certificate_year', 'Thống kê trong năm');
            } catch (error) {
                console.error('Error drawing non-certificate charts:', error);
                document.getElementById('non_certificate_month').innerHTML = 'Error loading chart data: ' + error.message;
                document.getElementById('non_certificate_year').innerHTML = 'Error loading chart data: ' + error.message;
            }
        }

        function drawNonCertificateChart(data, elementId, title) {
            if (!data || typeof data !== 'object') {
                throw new Error('Invalid data received');
            }
            const study = data.study ?? 0;
            const finishCourse = data.finishCourse ?? 0;
            const finishTime = data.finishTime ?? 0;
            var chartData = google.visualization.arrayToDataTable([
                ['', 'Học viên đã tham gia học', 'Học viên đã học ít nhất 1 khóa học', 'Học viên đã hoàn thành khóa học'],
                ['Khóa học không cấp chứng chỉ', study, finishTime, finishCourse]
            ]);

            var options = {
                chart: {
                    title: title,
                },
                colors: ['#4CAF50', '#2196F3', '#FFC107'],
                vAxis: {
                    viewWindow: { min: 0 },
                    format: '#',
                    textStyle: { fontSize: 12 }
                },
                hAxis: {
                    textStyle: { fontSize: 12 }
                },
                bar: {
                    groupWidth: '30%', groupPadding: '10%'
                },
                width: 500,
                height: 400,
                chartArea: { width: '80%', height: '70%', left: '10%' },
                legend: { position: 'none' }
            };

            var chart = new google.charts.Bar(document.getElementById(elementId));
            chart.draw(chartData, google.charts.Bar.convertOptions(options));
        }

        async function updateParticipantCount() {
            try {
                const monthData = await fetchData('@Url.Action("GetParticipantCountForMonth", "Home")');
                $('#totalParticipantsMonth').text(monthData);

                const yearData = await fetchData('@Url.Action("GetParticipantCountForYear", "Home")');
                $('#totalParticipantsYear').text(yearData);
            } catch (error) {
                console.error('Error updating participant count:', error);
                $('#totalParticipantsMonth').text('Error loading data');
                $('#totalParticipantsYear').text('Error loading data');
            }
        }

        async function updateCompletedCoursesCount() {
            try {
                const monthData = await fetchData('@Url.Action("GetCompletedCoursesForMonth", "Home")');
                $('#completedCoursesMonth').text(monthData);

                const yearData = await fetchData('@Url.Action("GetCompletedCoursesForYear", "Home")');
                $('#completedCoursesYear').text(yearData);
            } catch (error) {
                console.error('Error updating completed courses count:', error);
                $('#completedCoursesMonth').text('Error loading data');
                $('#completedCoursesYear').text('Error loading data');
            }
        }

        async function updateTotalUserGetCertificates() {
            try {
                const monthData = await fetchData('@Url.Action("GetTotalUsersGetCertificatesForMonth", "Home")');
                $('#getCertificatesMonth').text(monthData);

                const yearData = await fetchData('@Url.Action("GetTotalUsersGetCertificatesForYear", "Home")');
                $('#getCertificatesYear').text(yearData);
            } catch (error) {
                console.error('Error updating total users get certificates:', error);
                $('#getCertificatesMonth').text('Error loading data');
                $('#getCertificatesYear').text('Error loading data');
            }
        }

        function updateDateRanges() {
            const formatDate = (date) => {
                return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
            };

            const now = new Date();
            const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
            const firstDayOfYear = new Date(now.getFullYear(), 0, 1);

            $('#monthDateRange').text(`${formatDate(firstDayOfMonth)} - ${formatDate(now)}`);
            $('#yearDateRange').text(`${formatDate(firstDayOfYear)} - ${formatDate(now)}`);
        }

        async function initialize() {
            try {
                updateDateRanges();
                await Promise.all([
                    updateParticipantCount(),
                    updateCompletedCoursesCount(),
                    updateTotalUserGetCertificates()
                ]);
                google.charts.load('current', { 'packages': ['bar'] });
                google.charts.setOnLoadCallback(() => {
                    if (availableCourseTypes.includes(0)) {
                        drawCertificateCharts();
                    }
                    if (availableCourseTypes.includes(2)) {
                        drawUpdateCharts();
                    }
                    if (availableCourseTypes.includes(1)) {
                        drawNonCertificateCharts();
                    }
                });
            } catch (error) {
                console.error('Error during initialization:', error);
            }
        }

        $(document).ready(function () {
            initialize();

            $('#logoutButton').click(function (e) {
                e.preventDefault();
                $.ajax({
                    url: '@Url.Action("Logout", "Account")',
                    type: 'POST',
                    success: function (result) {
                        if (result.success) {
                            window.location.href = result.redirectUrl;
                        } else {
                            console.log('Logout failed');
                        }
                    },
                    error: function (error) {
                        console.log('Logout error:', error);
                    }
                });
            });
        });
    </script>
}